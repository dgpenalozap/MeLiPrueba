<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="Product Model Complete Unit Tests" tests="24" skipped="0" failures="0" errors="0" timestamp="2025-10-15T16:19:43" hostname="DESKTOP-AK5M5IG" time="0.046">
  <properties/>
  <testcase name="Equals should return false when comparing to null" classname="com.example.productcomparison.model.ProductTest" time="0.007"/>
  <testcase name="Rating getter should return exact decimal value" classname="com.example.productcomparison.model.ProductTest" time="0.0"/>
  <testcase name="Builder should handle null specifications" classname="com.example.productcomparison.model.ProductTest" time="0.002"/>
  <testcase name="Product should handle very long strings" classname="com.example.productcomparison.model.ProductTest" time="0.001"/>
  <testcase name="Equals should return false when comparing to different class" classname="com.example.productcomparison.model.ProductTest" time="0.0"/>
  <testcase name="Equals should return true for same products" classname="com.example.productcomparison.model.ProductTest" time="0.0"/>
  <testcase name="Equals should return true when comparing to itself" classname="com.example.productcomparison.model.ProductTest" time="0.0"/>
  <testcase name="Builder should handle empty specifications" classname="com.example.productcomparison.model.ProductTest" time="0.001"/>
  <testcase name="Getters should return correct values" classname="com.example.productcomparison.model.ProductTest" time="0.0"/>
  <testcase name="Product fields should be final (immutable)" classname="com.example.productcomparison.model.ProductTest" time="0.0"/>
  <testcase name="Product should handle zero price" classname="com.example.productcomparison.model.ProductTest" time="0.001"/>
  <testcase name="Specifications should support special characters" classname="com.example.productcomparison.model.ProductTest" time="0.0"/>
  <testcase name="Builder should create product with minimal fields" classname="com.example.productcomparison.model.ProductTest" time="0.0"/>
  <testcase name="Price getter should return exact decimal value" classname="com.example.productcomparison.model.ProductTest" time="0.0"/>
  <testcase name="Product with map should be created independently" classname="com.example.productcomparison.model.ProductTest" time="0.0"/>
  <testcase name="Product should handle large numbers" classname="com.example.productcomparison.model.ProductTest" time="0.0"/>
  <testcase name="ToString should contain all field values" classname="com.example.productcomparison.model.ProductTest" time="0.022"/>
  <testcase name="ToString should not fail with null description" classname="com.example.productcomparison.model.ProductTest" time="0.0"/>
  <testcase name="Product should handle decimal precision" classname="com.example.productcomparison.model.ProductTest" time="0.0"/>
  <testcase name="HashCode should be consistent" classname="com.example.productcomparison.model.ProductTest" time="0.001"/>
  <testcase name="Product should handle zero rating" classname="com.example.productcomparison.model.ProductTest" time="0.0"/>
  <testcase name="Specifications should support multiple entries" classname="com.example.productcomparison.model.ProductTest" time="0.0"/>
  <testcase name="Equals should return false for different products" classname="com.example.productcomparison.model.ProductTest" time="0.0"/>
  <testcase name="Builder should create product with all fields" classname="com.example.productcomparison.model.ProductTest" time="0.001"/>
  <system-out><![CDATA[]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
